import base64

# Base64 string (replace this with your actual encoded string)
base64_string = ''

# Decode the Base64 string
decoded_data = base64.b64decode(base64_string)

# Specify the file path and extension (e.g., 'decoded_image.png', 'decoded_file.txt')
file_path = 'decoded_file.png'

# Write the decoded data to a file
with open(file_path, 'wb') as file:
    file.write(decoded_data)

print(f"File saved as {file_path}")
